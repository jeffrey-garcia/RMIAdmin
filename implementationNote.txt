/****************************************************************
*
* Implementation Notes.
* 
* Last updated on 6 Mar 2006, 20:13
*
****************************************************************/

[Item in-progress]
1. Modify the product webpage:
	a> Create the bugs report page (use Applet + XML) 
	   to provide a search by user (can't use JavaHelp due to design complexity)

	   for details about bugs report, see:
	   http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4670071
	   http://java.sun.com/developer/technicalArticles/bugreport_howto/

	c> Create the Developer Center (which display API, coding sample)
	d> Create a page for Change History (done)
	e> Create a page for archived release (done)
	f> Create a page for beta release (done)

2. Build an installer for Windows Client.

3. Hidden bug in File Browser when direct input of target 
	navigated location.

4. One hidden bug found in FileEditor.

5. Develop the API manual (using JavaDoc).

6. Buffering technique to fetch data into JTable.

7. Create Javadoc for RMIClient_CommandLine.

8. Determine if the Auto-Upgrade require registration.

9. Determine the possibility of making RMIAdmin free. (done)

------------------------------------------------------------------

[Action List]
1. Show the last executed command (or break point) during Batch 
    execution.
   
2. Modify the way that other class access the RMIClientGUI_Debugger. 
    But how?

3. File Upload should allow CANCEL during uploading. [Next version]

4. File Upload should allow setting of File Attributes if possible [Next version]

5. File Upload should allow post-upload System Call [Next version]

6. Animated Duke as a Help Wizard [Next version]

7. Complete code algorithm and performance enhancement [Next version]

8. File Encrytion [Next version]

9. File Compression [Next version]

10. Implementation of Error Code Reference in RMI Command Mode [Next Version]

11. Improve the coding of FileBrowser and FileTransfer operation to 
	accept fullpath only, rather than pre-checking in the client side. 
	Since this cause serious overhead in the server side programming. 
	[Next Version]

12. Debug Mode option when using the RMI Command [Next Version]

13. Show the detail view immediately even when recursive file 
	size is still being calculated. [Next Version]
	
	*** Require the implmentation of remote thread process tracking.

14. Setup accelerator on all buttons [Next version]

15. Schedular [Next version]

16. Custom Batch mode for both File Transfer and File Browser [Next version]

17. Auto Dianostic (Artificial Intelligence) [Next Version]

18. Dynamic shell assignment when executing batch  [Next Version]

19. Better Process/Threading termination at remote JVM during 
	restart of RMIServer [next version]
	
21. Fix the bug in Execute Remote Command - where output of error command 
	may not be shown [Next Version]

20. Config local browser [Next version]

------------------------------------------------------------------

[Recent Fix]

1. Decompose the RMIClientGUI_FileBrowser into:
	a> RMIClientGUI_FileBrowser2.java
	b> RMIClientGUI_FileTreeView.java
	c> RMIClientGUI_FileTableView.java
	
2. Enhance the Threading mechanism when executing custom batch

3. Solve the GUI display problem of refreshing JPanel

4. Fix the Threading problem when copying/moving large amount of files

5. Support multiple instances of file copying/moving requests

6. Put the "Selected Server" string into a JTextField, while
    the "Select Server" Button should be on BorderLayout.EAST
   
7. Abandon the Trash function

8. [Bugs] "File Size" column can be sorted correctly in JTable of FileTableViewer

9. [Bugs] Setup the TableSorter for "Modified Date" column in the 
    RMIClientGUI_FileTableView.java
    
10. Sychronize the File Table View with the File Tree View

11. Implement selected cells over the File Table View

12. Implementation of JPopupMenu over cells of File Table View

13. Reserve the same "Modified Date" for pasting file

14. Show file name in JProgressBar when pasting file

15. Show previous file object name on the rename window.

16. Capture the Error/Exception from RMIServer_FileBrowser and display it 
       on the RMIClientGUI_FileTreeView
   
17. Delete Confirmation is provided with "Delete All" and "Cancel All".

18. Limit single selection to the JTree of FileTreeView

19. File size of Folder should be counted recursively.

20. Implement "Double-Click to enter folder" in "Folder" of FileTableView

21. Dynamically disable or enable the paste function in pop-up menu on both 
       FileTableView and FileTreeView
	
22. Add more buttons in JOptionPane [Delete Confirmation of FileTableView]

23. Provide option - "Replace All" when pasting files

24. [Bugs] Rows of FileTableView may not be responding, when columns are interchanged 
       with each others.
       (e.g. If Modified Date is moved to the first column, "detail" show nothing.
    
25. FileTableView cannot communicate with FileDetailView, actually we control 
       this by disabling the "Paste" action by default. And enable it only when 
       user's has previously perform a "Copy" or "Cut" action.
	
26. Re-arrange the column ordering of the FileTableView in the below format:
	[Name]	|	[Size]	|	[Type]	|	[Modified Date]
	---------------------------------------------------
	
27. Display of Unit of File Size should always be converted to
       a> Bytes - if actual file size is less than 1 KByte
       b> KBytes - if actual file size is less than 1 MB
       c> MB - if actual file size is less than 1 GB

28. Empty the FileBrowser and FileDetail view when remote server not available

29. Auto-Highlighting of the current selected Server in all functional views, such 
       that the general info of the Server could draws a higher attention on users.
	
30. Modify the class hierachy, such that:
	RMIClientGUI_Function		<Interface>
	|
	|   implements
	|<--------------- RMIClientGUI_FileTreeView
	|
	|   implements
	|<--------------- RMIClientGUI_FileTableView
	|
	|   implements
	|<--------------- RMIClientGUI_TransferLocalView 
	|
	|   implements
	|<--------------- RMIClientGUI_TransferRemoteView


31. Disable the "Paste" function after reload the file system
       a> FileTableView
       b> FileTreeView
       c> TransferLocalView
       d> TransferRemoteView

32. Break Down the RMIClient_FileTransfer Local and Remote.

33. File Upload should allow uploading of single file and folders

34. File Upload should have a progress bar when uploading of single 
       file and folders

35. Set the File Transfer, File Copy Progress (JInternalFrame) in
       the middle of the JDesktopPane
	
36. Implement the File Download (GUI)
       a> check target download location must be a folder
       b> get the Selected Node from the JTree of Transfer Local View
	
37. Implement the File Download (GUI)
       a> enable download of Folder recursively
       b> visual progress of download status
       c> prompt for overwrite if duplicate file exist
	
38. Implement the View Option in JMenu, such that user could quickly 
      minimize or maximize all the JInternalFrame
	
39. Implement the Delay Upload and Delay Download feature

40. [Bugs] Implement synchronized update of the Transfer Queue (to keep consistency).

41. Disable the "Open Queue" button when "transferring of queue" is in progress.

42. Implement the Connection Monitor

43. Implement the "Switch Window" feature

44. Allow edit of text file on File Browser and File Transfer.
       Please refer below for the implementation details:
	
        If the File Edit request is being triggered on any remote view,
        a> the file will first be downloaded in ascii mode to 
             local (e.g. user home\RMIAdmin\).
        b> then the local file content will be buffered to memory
        c> the buffered string will then be passed to a JTextArea 
             for GUI display
        d> when editing is done with save, the file is automatically 
              uploaded in ascii mode back to its original location.
        e> no matter the file edit is done with save or aborted, or 
              else error occur, the local file in (user home\RMIAdmin\) 
              will be deleted automatically.

        If the File Edit request is being triggered on any local view,
        a> the local file content will be directly buffered to memory
        b> the buffered string will then be passed to a JTextArea 
              for GUI display
        c> when editing is done with save, the file is saved immediately
        d> yet if the editing is aborted or else error occur, 
              the local file will persist its original content.

45. [Bugs] Fix the bug of TransferRemoteView when the remote path is set
       to c: , and pressing the Up button will not navigate to c:\
	
46. Implement the path entering text field on FileBrowser such that 
       user could quickily navigate to the target location simply 
       by inputing the target path (just like the remote path field of
       FileTransferRemoteView)
	
47. Try to set a detector to focus on the current selected node 
       in the FileTreeView
    
48. Allow non-case-sensitive path navigation for MS-Based Server 
      over the FileTreeView
	
49. Dynamic update of the Navigation Path of on FileBrowser based 
       on the currently selected object.

50. Implement copy & paste accross FileTableView & FileDetailView

51. Dynamic update of the Navigator Bar based on the current 
       selected Object in the FileTreeView or FileTableView
       
52. [Bugs] Fix the bug in when editing large text file.
       By the use of RandomAccessFile technique, we fetch a 
       certain amount of data (bytes) into memory.

53. Implement the "Zone View" technique which is capable of 
       buffering only the content needed to be display. 
       This can avoid downloading the whole piece of file before 
       viewing the content, this could avoid the overhead of large 
       file size.

54. [Bugs] Fix the bug in the warning call of all GUI classes 
	(null pointer exception)

55. Enhancement on FileEditor to support both:
    FileTransferRemote View and FileTransferLocal View
    
56. Disable editing on selected Drive.

57. Test the FileTreeView and FileTableView on Linux

58. [Bugs] Solve the slow response problem when pasting large amount 
	of text (around 3500 lines) by using JRE 1.4.2 or above.

59. [Bugs] Fix bug on File Browser found (Occur in both Windows & Linux).
	Whenever copy file from tree view to table view, opening of 
	folders (by double click) on the table view is disabled.
	
	Else if copy file from table view to tree view, there will 
	be an error indicating insufficient right or drive not 
	accessible

60. [Bugs] Fix the bug on showing recursive file size when target is not 
	accessible

61. [Bugs] Fix the bug (and display error) when problem is anticipated 
	during File Operations such as:
	a> Movement
	b> Copying
	c> Transfer (both upload + download)
	
	Known issues:
	a> Remote Drive not ready (e.g. Floppy/CD-Rom)
	b> Drive is accessible (e.g. Root/Administrator)
	c> Source does not exist
	d> Target path does not exist
	e> Insufficient disk space
	
	Error code will be ready in next version to assist in problem
	investigation.

62. Draw the icon for File Deletion

63. Implement threading on File Deletion
	FileTableView, TransferLocalView, TransferRemoteView
	
64. Working on the Encrpytion Algorithm
	(for Trial Version and Licensed Version)
	
	So we'll use the famous encryption technique:
	Vignere cipher
	
	We'll set a Text [I LOVE PROGRAMMING JAVA] embedded 
	in the software package internally, and each time a 
	customer buy the software, we'll give the public 
	to user, so he/she could enter it, and the Cipher 
	algoritm is capable of converting it back to the 
	Text. So if the user has the key, he or she will 
	be able to use the licensed copy.
	
	Otherwise, the software can still be used, but 
	with a 30 days registration. We do the 30 days 
	validation again using the same Cipher algorithm 
	to encrypt the installation date time at user's 
	computer.
	
65. [Bugs] Fix the GUI display incorrect position problem when 
	display output to dual monitor.
	
66. Draw the application icon

67. Setup cut/copy/paste/select_all on every GUI components

68. Rename the server.xml to RMIServer.xml

69. Implement the exportation of DebugConsole and ServerList

70. Activate authentication when registration success.

71. Implement the "Restart RMI" in Connection Monitor.
	This is actually abandoned, since we put it into the 
	"Custom Batch" of the CommandLine Utility.
	
72. Search Screen Text for Execute Command

73. Command Line Mode for Connection Monitor

74. Much enhanced security, now every method of Remote Server now 
	require the pass in of the unencrypted passphrase.
	
	If the RMIServer -k option not turned on, then no validation will 
	occur.
	
	While if the -k option is turned on, then the client must pass in 
	the default key each time in order to use the remote methods.
	
	Takes the below example:
	
	Non-auth server [without -k option]
	Non-auth client [dat files absent or evaluation mode]
	
	Auth server [with -k option]
	Auth client [dat files exist or registered mode]
	
	Only an Auth client can connect with an Auth server.
	Only an Non-auth client can connect a Non-auth server.
	
	* Cross-connection is disallowed.
	
75. [Bugs] Fix the bug such in RMIClientGUI_Startup.java such that 
	when the application is loaded under Web Deploy mode, 
	the startup logo can still be shown.
	
76. Modify the RMIAdmin such that it can be easily converted 
	to a JNLP Web Application. For example to auto detect: 
	if user have .java.policy
	if user have the RMIServer.xml, if no, create one in user's home path

77. Create a differenct set of HelpSet file such that the JAVA 
	help component can navigate to preferred help menu when 
	invoked.

78. A quick start guide for easy referencing, and allow user to 
	define whether the Quick Start will be shown at software startup
	
79. A new class RMIClientGUI_SetConfig is created for setting user 
	preferences of the RMIAdmin.

80. Rewrite the HELP of "Generate Authentication"

81. Set some limitation in functionality when software is in 
	evaluation mode - Genereate Authentication will only 
	be activated when in evalutation mode

82. [Bugs] Bugs found in File Copy [USB Storage], cannot display message 
	when disk is full, finally fixed

83. Show the last executed command (or break point) during Batch
    execution, now shown in Debug Console

84. A new class - RMIClientGUI_HelpSet is added, it provides a static 
	method such that we can easily retrieve a HelpSet Object easily 
	anywhere in the program

85. Added the shutdownRMI function

86. Completed the memory monitor, plus remote JRE/VM information display, 
	and Garbage Collection.
	Note that Memory Monitor will be opened even for non-registered user.

87. Add some alert if incomplete information when adding new server.

88. Add a new method alert(String msg) to the RMIClientGUI class.

89. Remote Control [Beta] - by java.awt.Robot now ready 
	(allow only one connected session).

90. Added a Remote Timer for getting remote system time

91. Auto load the remote file system in File Browser after preferred 
	server has been selected.
	
92. Auto load the local and remote file system in File Transfer after preferred 
	server has been selected.

93. Auto load the connection testing in Connection Monitor when RMIAdmin 
	startup.
	By adding a thread to invoke the refreshAllServer() method in the 
	constrcutor of RMIClientGUI_ConnectionMonitor class.
	
94. Invoke updateUI() and revalidate() to the JPanel which contain the 
	JTable in the Connection Monitor, such that user will always know 
	that if the connection test of the selected server has completed or not.

95. [Bugs] Abandon customized font (Arial) to the UIManager, since this will produce 
	font displaying problem especially when the font/locale of the target 
	computer is in Unicode.
	
96. Importation of server list

97. Create the Auto-Upgrade (but need to consider if open for 
	beta user or registered user).

98. Allow cancel when auto-update is in progress, and make sure 
	original file is not replaced during the upgrade.
	
99. Update the Command Line for connection monitor (now include the shutdown).
